{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0dG-Pm9-UpYh"
      },
      "source": [
        "#### Activity 1: Create Customized Line plots.\n",
        "\n",
        "Given the dataset of the average annual salary (in dollars) of developers of various programming languages. Create customized line plots to compare the salary variations **Age-wise** for **Python** developer with **Javascript** developer.\n",
        "\n",
        "**Link to the Dataset**: https://raw.githubusercontent.com/CoreyMSchafer/code_snippets/master/Python/Matplotlib/10-Subplots/data.csv "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yYlWfTFxUx8C",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "bfe783ee-188a-4876-8b4e-449e536b5c1d"
      },
      "source": [
        "# Step 1: Import necessary modules to create dataframe and line plots \n",
        "# Step 2: Create a Dataframe and store it in a variable from the given dataset\n",
        "# Print the first 5 rows in the DataFrame\n",
        "import pandas as pd\n",
        "data=pd.read_csv(\"https://raw.githubusercontent.com/CoreyMSchafer/code_snippets/master/Python/Matplotlib/10-Subplots/data.csv\");\n",
        "data.head()\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Age  All_Devs  Python  JavaScript\n",
              "0   18     17784   20046       16446\n",
              "1   19     16500   17100       16791\n",
              "2   20     18012   20000       18942\n",
              "3   21     20628   24744       21780\n",
              "4   22     25206   30500       25704"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6eae7d12-fced-4300-9134-53a18efb0fad\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Age</th>\n",
              "      <th>All_Devs</th>\n",
              "      <th>Python</th>\n",
              "      <th>JavaScript</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>18</td>\n",
              "      <td>17784</td>\n",
              "      <td>20046</td>\n",
              "      <td>16446</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>19</td>\n",
              "      <td>16500</td>\n",
              "      <td>17100</td>\n",
              "      <td>16791</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>20</td>\n",
              "      <td>18012</td>\n",
              "      <td>20000</td>\n",
              "      <td>18942</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>21</td>\n",
              "      <td>20628</td>\n",
              "      <td>24744</td>\n",
              "      <td>21780</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>22</td>\n",
              "      <td>25206</td>\n",
              "      <td>30500</td>\n",
              "      <td>25704</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6eae7d12-fced-4300-9134-53a18efb0fad')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6eae7d12-fced-4300-9134-53a18efb0fad button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6eae7d12-fced-4300-9134-53a18efb0fad');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KYfflY2cd3Ow",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 276
        },
        "outputId": "10695496-1c3a-4cdd-d02d-9b020c816546"
      },
      "source": [
        "# Step 3: Create a customised line plot for comparing the Age-wise annual salary variations for Python developer with JavaScript developer.  Use the 'seaborn-dark' style\n",
        "import matplotlib.pyplot as plt\n",
        "plt.style.use('seaborn-dark')\n",
        "plt.plot(data['Age'],data['Python'],label='Python',color=\"g\")\n",
        "plt.plot(data['Age'],data['JavaScript'],label='JavaScript',color=\"r\")\n",
        "plt.xlabel('Age')\n",
        "plt.ylabel('Salary')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PLSY4nu0UzCj"
      },
      "source": [
        "**Q**: What can you conclude from the above comparison ?\n",
        "ans:Python have high salary than JavaScript Dev.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BVT9G_baB1aq"
      },
      "source": [
        "#### Activity 2.1: Create a Pandas DataFrame\n",
        "\n",
        "Create a Pandas DataFrame by using the below link which has the dataset of Tips taken on the total bill amount in restaurants in the CSV format: \n",
        "\n",
        "**Dataset Link** :https://raw.githubusercontent.com/mwaskom/seaborn-data/master/tips.csv\n",
        "\n",
        "Also, print the first five rows of the dataset."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0pIGxKG9B3mb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "2176f1fb-8f51-4539-8f3e-e96346750236"
      },
      "source": [
        "# Create a pandas DataFrame\n",
        "df=pd.read_csv('https://raw.githubusercontent.com/mwaskom/seaborn-data/master/tips.csv')\n",
        "df.head()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   total_bill   tip     sex smoker  day    time  size\n",
              "0       16.99  1.01  Female     No  Sun  Dinner     2\n",
              "1       10.34  1.66    Male     No  Sun  Dinner     3\n",
              "2       21.01  3.50    Male     No  Sun  Dinner     3\n",
              "3       23.68  3.31    Male     No  Sun  Dinner     2\n",
              "4       24.59  3.61  Female     No  Sun  Dinner     4"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6e09279a-37eb-4cec-b1a3-033b9313070f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>total_bill</th>\n",
              "      <th>tip</th>\n",
              "      <th>sex</th>\n",
              "      <th>smoker</th>\n",
              "      <th>day</th>\n",
              "      <th>time</th>\n",
              "      <th>size</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>16.99</td>\n",
              "      <td>1.01</td>\n",
              "      <td>Female</td>\n",
              "      <td>No</td>\n",
              "      <td>Sun</td>\n",
              "      <td>Dinner</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>10.34</td>\n",
              "      <td>1.66</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>Sun</td>\n",
              "      <td>Dinner</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>21.01</td>\n",
              "      <td>3.50</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>Sun</td>\n",
              "      <td>Dinner</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>23.68</td>\n",
              "      <td>3.31</td>\n",
              "      <td>Male</td>\n",
              "      <td>No</td>\n",
              "      <td>Sun</td>\n",
              "      <td>Dinner</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>24.59</td>\n",
              "      <td>3.61</td>\n",
              "      <td>Female</td>\n",
              "      <td>No</td>\n",
              "      <td>Sun</td>\n",
              "      <td>Dinner</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6e09279a-37eb-4cec-b1a3-033b9313070f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6e09279a-37eb-4cec-b1a3-033b9313070f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6e09279a-37eb-4cec-b1a3-033b9313070f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g5ojkSnpCnQg"
      },
      "source": [
        "#### Activity 2.2: Create a Gender wise Count plot\n",
        "\n",
        "Create a gender wise count plot by using the values in the `sex` column. "
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(df['sex'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 314
        },
        "id": "HWA7twG3i8oc",
        "outputId": "a1426a24-9569-4173-8939-6a76f2170041"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([ 87.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0., 157.]),\n",
              " array([0. , 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ]),\n",
              " <a list of 10 Patch objects>)"
            ]
          },
          "metadata": {},
          "execution_count": 39
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UlGejEowCtAE",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "outputId": "39c1b035-75c2-48ff-9d66-66ce190f8091"
      },
      "source": [
        "# Gender wise count plot for the 'sex' values in the 'tip_df' DataFrame on the x-axis.\n",
        "import seaborn as sb\n",
        "sb.countplot(x='sex',data=df)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7fa661840110>"
            ]
          },
          "metadata": {},
          "execution_count": 37
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HSb3LhQkCyEZ"
      },
      "source": [
        "So according to the above count plot, the number of `Female` is less than the number of `Male` in the dataset."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EWT5qwtSCzrD"
      },
      "source": [
        "**Q** : Which gender is recorded more in the dataset ?\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PIqqLcdHnrwG"
      },
      "source": [
        "#### Activity 3: Histogram using `hist()` Function\n",
        "\n",
        "Given a list of random age of 100 individuals in a range between 1 and 91. Write a code to visualise the values in the list using a histogram.\n",
        "\n",
        "```\n",
        "age_list = [1,1,2,3,3,5,7,8,9,10,\n",
        "     10,11,11,13,13,15,16,17,18,18,\n",
        "     18,19,20,21,21,23,24,24,25,25,\n",
        "     25,25,26,26,26,27,27,27,27,27,\n",
        "     29,30,30,31,33,34,34,34,35,36,\n",
        "     36,37,37,38,38,39,40,41,41,42,\n",
        "     43,44,45,45,46,47,48,48,49,50,\n",
        "     51,52,53,54,55,55,56,57,58,60,\n",
        "     61,63,64,65,66,68,70,71,72,74,\n",
        "     75,77,81,83,84,87,89,90,90,91\n",
        "     ]\n",
        "```\n",
        "\n",
        "**Steps to Follow**:\n",
        "\n",
        "1. Import the `matplotlib.pyplot` module.\n",
        "\n",
        "2. Set the size of the plot using the `figsize` attribute of the `figure()` function.\n",
        "\n",
        "3. Pass the `age_list` list inside the `hist()` function and set `bins = 10`.\n",
        "\n",
        "4. Display the histogram using the `show()` function of the `matplotlib.pyplot` module."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m6KfoItXnrwR",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 316
        },
        "outputId": "c9c71d97-9471-4890-e616-8de07818a561"
      },
      "source": [
        "\n",
        "# Import the 'matplotlib.pyplot' module.\n",
        "import matplotlib.pyplot as plt\n",
        "age_list = [1,1,2,3,3,5,7,8,9,10,\n",
        "     10,11,11,13,13,15,16,17,18,18,\n",
        "     18,19,20,21,21,23,24,24,25,25,\n",
        "     25,25,26,26,26,27,27,27,27,27,\n",
        "     29,30,30,31,33,34,34,34,35,36,\n",
        "     36,37,37,38,38,39,40,41,41,42,\n",
        "     43,44,45,45,46,47,48,48,49,50,\n",
        "     51,52,53,54,55,55,56,57,58,60,\n",
        "     61,63,64,65,66,68,70,71,72,74,\n",
        "     75,77,81,83,84,87,89,90,90,91\n",
        "     ]\n",
        "\n",
        "# Set the size of the plot using the 'figsize' attribute of the 'figure()' function.\n",
        "plt.figure(figsize=(16,5))\n",
        "\n",
        "# Pass the 'age_list' list inside the 'hist()' function and set 'bins = 10'.\n",
        "plt.hist(x=age_list,bins=10)\n",
        " \n",
        "# Display the histogram using the 'show()' function of the 'matplotlib.pyplot' module.\n",
        "plt.show()\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1152x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NlxWVbH9w6EZ"
      },
      "source": [],
      "execution_count": null,
      "outputs": []
    }
  ]
}